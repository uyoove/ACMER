//和爸爸一起学编程真好,不过要小学四年级分流考试了,最近没时间写代码了,呜呜呜
#include<bits/stdc++.h>
using namespace std;
#define out(x) cout << #x << '=' << (x) << endl
#define out2(x, y) cout << #x << '=' << (x) << ',' << #y << '=' << (y) << endl 
#define int long long
#define lc u<<1
#define rc u<<1|1
#define pb push_back
#define vt vector
#define fi first
#define se second
#define all(x) x.begin(), x.end()
#define PII pair<int,int>
#define endl "\n"
#define il inline
typedef unsigned long long ULL;
typedef long long ll;
il int read(){
	int x=0,f=1;char ch=getchar();
	while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}
	while(ch>='0'&&ch<='9')x=(x<<3)+(x<<1)+(ch^48),ch=getchar();
	return x*f;
}
const ll inf = 0x3f3f3f3f3f3f3f3fLL;
const int infi = 0x3f3f3f3f;
const int MOD = 998244353;
const int N = 200005;
void ksm(int x,int n){
	int res = 1;
	while(n){
		if(n&1) res = res * x %MOD;
		x = x*x % MOD;
		n>>=1;
	}
	return res;
}
int inv(int x){
	return ksm(x,MOD - 2);
}
int n;
int f[110][1 << 11]; //表示前i个数 (j + 1)这一位是否可达 (比如说2 我在位运算是第1位),
int a[N];
void solve(){
	cin >> n;
	for(int i = 1;i <= n;i++) cin >> a[i];
	int mask = (1 << 10) - 1;
	f[0][0] = 1;
	for(int i = 1;i <= n;i++){
		for(int j = 0;j <= mask;j++){
			for(int k = 1;k <= min(a[i],10ll),k++){
				//本身 | 子集每个数加上k的状态 | k本身 即为集合可达态
				int v = j | ((j << k) & mask) | (1 << (k - 1));
				f[i][v] += f[i - 1][j]%MOD*iv(a[i])%MOD; //概率累加,多种状态到达一种
				f[i][v]%=MOD; 
			}
		}
		if(a[i] > 10){
			//如果大于10虽然不影响,但也是算一种子集
			for(int j = 0;j <= mask;j++){
				f[i][j] += f[i - 1][j]*iv(a[i] - 10)%MOD;
				f[i][j]%=MOD;
			}
		}
	}
	int ans = 0;
	for(int i = 0;i <= mask;i++){
		if(i & (1 << 9)) ans+=dp[n][i],ans%=MOD;
	}
	cout << ans << endl;
}

signed main(){
	std::ios::sync_with_stdio(0);
    std::cin.tie(0);
    std::cout.tie(0);
	int times = 1;
	//cin >> times;
	while(times--){
		solve();
	}
	return 0;
}